data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
b <- cachemean(a)
b
b <- cachemean(a)
b
a <- makeVector(matrix(1:4,2))
class(a$get)
class(a)
a$getmean()
a$setmean()
a <- makeVector(c(1,2,3))
a$setmean()
s$get()
a$get()
?matrix
makeCacheMatrix <- function(x = matrix() {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setInverse <- function(mean) m <<- mean
getInverse <- function() m
list(set = set, get = get,
setInverse = setInverse,
getInverse = getInverse)
}
makeCacheMatrix <- function(x = matrix() {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setInverse <- function(mean) m <<- mean
getInverse <- function() m
list(set = set, get = get,
setInverse = setInverse,
getInverse = getInverse)
}
a$get()
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setInverse <- function(mean) m <<- mean
getInverse <- function() m
list(set = set, get = get,
setInverse = setInverse,
getInverse = getInverse)
}
a <- makeCacheMatrix(matrix(1:4,2))
a$get()
a$getInverse()
a$set(matrix(5:8,2))
a$get()
cacheSolve <- function(x, ...){
m <- x$getInverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve (data, ...)
x$setInverse(m)
m
}
cacheSolve(a)
cacheSolve(a)
a$getInverse()
b = a$getInverse()
a$get() %*% b
## The aim of this assignment is to write a pair of functions that cache the inverse of a matrix
## so that the inverse do not have to be done repeatedly if the matrix has not changed.
## This function creates a matrix that can cache its inverse.
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setInverse <- function(inverse) m <<- inverse
getInverse <- function() m
list(set = set, get = get,
setInverse = setInverse,
getInverse = getInverse)
}
## The following function computes the inverse of the matrix returned by the makeCacheMatrix above.
## If the inverse has already been calculated (and the matrix has not changed),
## then the function will retrieve the inverse from the cache.
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getInverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve (data, ...)
x$setInverse(m)
m
}
a <- makeCacheMatrix(matrix(1:4,2))
a$get()
a$getInverse()
solve
a$get()
cacheSolve(a)
cacheSolve(a)
b = a$getInverse()
a$get() %*% b
m <- matrix(c(1, 1, 1, 3, 4, 3, 3, 3, 4),3)
m
a <- makeCacheMatrix(matrix(c(1, 1, 1, 3, 4, 3, 3, 3, 4),3))
a$get()
a$getInverse()
solve
a$getInverse()
cacheSolve(a)
cacheSolve(a)
?ztest
?z.test
power.t.test(n=100, delta = 0.01, type = "one.sample", alt = "one.sided")$power
power.t.test(n=100, delta = 0.01, sd = 0.04, type = "one.sample", alt = "one.sided")$power
power.t.test(power=.9, delta = 0.01, sd=0.04, type = "one.sample", alt="one.sided")$n
power.z.test(power=.9, delta = 0.01, sd=0.04, type = "one.sample", alt="one.sided")$n
power.z.test(power=.9, delta = 0.01, sd=0.04, type = "paired", alt="one.sided")$n
power.t.test(power=.9, delta = 0.01, sd=0.04, type = "paired", alt="one.sided")$n
install.packages("Using.R")
library(Using R)
data(galton)
par(mfrow=c(1,2))
hist(galton$child,col="blue",breaks=100)
hist(galton$parent,col="blue",breaks=100)
install.packages("UsingR")
library(Using R)
data(galton)
par(mfrow=c(1,2))
hist(galton$child,col="blue",breaks=100)
hist(galton$parent,col="blue",breaks=100)
library(UsingR)
data(galton)
par(mfrow=c(1,2))
hist(galton$child,col="blue",breaks=100)
hist(galton$parent,col="blue",breaks=100)
library(manipulate)
myHist <- function(mu){
hist(galton$child,col="blue",breaks=100)
lines(c(mu, mu), c(0, 150),col="red",lwd=5)
mse <- mean((galton$child - mu)^2)
text(63, 150, paste("mu = ", mu))
text(63, 140, paste("MSE = ", round(mse, 2)))
}
manipulate(myHist(mu), mu = slider(62, 74, step = 0.5))
```{r freqGalton, dependson="galton",fig.height=6,fig.width=6,echo=FALSE}
freqData <- as.data.frame(table(galton$child, galton$parent))
names(freqData) <- c("child", "parent", "freq")
plot(as.numeric(as.vector(freqData$parent)),
as.numeric(as.vector(freqData$child)),
pch = 21, col = "black", bg = "lightblue",
cex = .15 * freqData$freq,
xlab = "parent", ylab = "child")
par(mfrow=c(1,1))
```{r freqGalton, dependson="galton",fig.height=6,fig.width=6,echo=FALSE}
freqData <- as.data.frame(table(galton$child, galton$parent))
names(freqData) <- c("child", "parent", "freq")
plot(as.numeric(as.vector(freqData$parent)),
as.numeric(as.vector(freqData$child)),
pch = 21, col = "black", bg = "lightblue",
cex = .15 * freqData$freq,
xlab = "parent", ylab = "child")
```
str(freqData)
str(dalton)
str(galton)
{r freqGalton, dependson="galton",fig.height=6,fig.width=6,echo=FALSE}
freqData <- as.data.frame(table(galton$child, galton$parent))
names(freqData) <- c("child", "parent", "freq")
plot(as.numeric(as.vector(freqData$parent)),
as.numeric(as.vector(freqData$child)),
pch = 21, col = "black", bg = "lightblue",
cex = .15 * freqData$freq,
xlab = "parent", ylab = "child")
```{r freqGalton, dependson="galton",fig.height=6,fig.width=6,echo=FALSE}
freqData <- as.data.frame(table(galton$child, galton$parent))
names(freqData) <- c("child", "parent", "freq")
plot(as.numeric(as.vector(freqData$parent)),
as.numeric(as.vector(freqData$child)),
pch = 21, col = "black", bg = "lightblue",
cex = .15 * freqData$freq,
xlab = "parent", ylab = "child")
View(freqData)
table(galton$child, galton$parent)
View(galton)
?for
)
?for
?seq
x <- c(0.18, -1.54, 0.42, 0.95)
w <- c(2, 1, 3, 1)
xw
x*w
sum(x*w)
sum(x*w)/7
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
plot(y,x)
plot(x,y)
lm(y ~ x -1)
plot(x,y)
abline(lm(y ~ x -1))
plot(x,y, xlim(0,1), ylim(-1.5, 1.5))
abline(lm(y ~ x -1))
plot(x,y, xlim =(0,1), ylim=(-1.5, 1.5))
abline(lm(y ~ x -1))
?plot
plot(x,y, xlim =c(0,1), ylim=c(-1.5, 1.5))
abline(lm(y ~ x -1))
str(mtcars)
lm(mpg ~ wt)
with(mtcars(lm(mpg ~ wt)))
lm(mtcars$mpg ~ mtcars$wt)
x <- c(8.58, 10.46, 9.01, 9.64, 8.86)
summary(x)
sd(x)
(x[1]-mean(x))/sd(x)
?normal
?z
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
lm(x ~ y)
lm(y~x)
mean(x)
setwd("C:/Users/yeechien.chen/RepData_PeerAssessment1")
activity <- read.csv(unz("activity.zip", "activity.csv"), colClasses = c("numeric", "Date", "numeric"))
meansteps <- tapply(activity$steps, as.factor(activity$interval), mean, simplify=FALSE, na.rm=T)
df <- data.frame(dimnames(meansteps), unlist(meansteps))
colnames(df) <- c("interval", "stepmean")
activity$impute <- activity$steps
activity[,4] <- sapply(activity[,4], ifelse(is.na(activity[,1]),
df[which(activityi,3]==df$interval),2],
activity[,1]))
activity[,4] <- sapply(activity[,4], ifelse(is.na(activity[,1]),
df[which(activity[,3]==df$interval),2],
activity[,1]))
impute <- function(A, D){
ifelse(is.na(A[,1]),
D[which(A[,3]==D$interval),2],
A[,1])
}
activity[,4] <- sapply(activity[,4], impute(activity, df))
impute(activity,df)
head(impute(activity,df))
View(df)
View(df)
sum(impute(activity,df)==df$stepmean)
head(impute(activity,df)==df$stepmean)
sum(is.true(impute(activity,df)==df$stepmean))
sum(is.TRUE(impute(activity,df)==df$stepmean))
sum((impute(activity,df)==df$stepmean)==TRUE)
sum(impute(activity,df)==df$stepmean, na.rm=TRUE)
check <- cbind(df$stepmean,impute(activity,df))
View(check)
View(check)
tr(activity)
str(activity)
imp <- impute(activity,df)
check <- cbind(activity$steps, df$stepmean, imp)
View(check)
check[2500,]
check[3000,]
impute <- function(A, D){
ifelse(is.na(A$steps),
D[which(A$interval==D$interval),2],
A$steps)
}
activity$impute <- sapply(activity, impute(activity, df))
activity$impute <- ifelse(is.na(activity$steps),
df[which(activity$interval==df$interval),2],
activity$steps)
newsumsteps <- tapply(activity$impute, activity$date, sum)
hist(newsumsteps, xlab="total number of steps taken per day", main=NULL)
newmean <- mean(newsumsteps)
newmedian <- median(newsumsteps)
newmean
head(newsumsteps)
class(newsumsteps)
summary(newsumsteps)
median(newsumsteps)
median(as.numeric(newsumsteps))
str(newsumsteps)
dim(newsumsteps)
dim(activity)
summary(activity)
summary(activity)
activity$impute[300]
activity[300,]
summary(imp)
summary(df)
check1 <- activity$interval==df$interval
summary(check1)
check1 <- which(activity$interval==df$interval)
summary(check1)
library("plyr", lib.loc="C:/Program Files/R/R-3.1.0/library")
df <- data.frame(dimnames(meansteps), unlist(meansteps))
colnames(df) <- c("interval", "stepmean")
activity$impute <- activity$steps
for (i in seq_along(activity[,1])) {
activity[i,4] <- ifelse(is.na(activity[i,1]),
df[which(activity[i,3]==df$interval),2],
activity[i,1]
)
}
newsumsteps <- tapply(activity$impute, activity$date, sum)
hist(newsumsteps, xlab="total number of steps taken per day", main=NULL)
activity$day <- weekdays(as.Date(activity$date))
activity$daytype <- as.factor(ifelse(activity$day == "Saturday"|activity$day == "Sunday",
"weekend","weekday"))
wkday <- subset(activity, subset=daytype=="weekday")
wkend <- subset(activity, subset=daytype=="weekend")
try <- ifelse(activity$day == c("Monday","Tuesday"),"yes","no")
summary(try)
try1 <- as.factor(ifelse(activity$day == c("Monday","Tuesday","Wednesday","Thursday","Friday"),"yes","no"))
try1 <- ifelse(activity$day == c("Monday","Tuesday","Wednesday","Thursday","Friday"),"yes","no")
try1 <- ifelse(activity$day == c("Monday","Tuesday"),"yes","no")
try1 <- ifelse(activity$day == c("Saturday","Sunday"),"yes","no")
try1 <- as.factor(ifelse(activity$day == c("Saturday","Sunday"),"yes","no"))
summary(try1)
summary(activity$daytype)
str(activity)
ddply(activity, c("daytype","interval"), summarise, newdf = mean(impute))
c <- ddply(activity, c("daytype","interval"), summarise, newdf = mean(impute))
View(c)
View(c)
library("ggplot2", lib.loc="C:/Program Files/R/R-3.1.0/library")
ggplot(c)
str(c)
ggplot(c, aes(x=interval, fill=newdf))
ggplot(c, aes(x=interval, fill=newdf,y=freq))
ggplot(c, aes(x=interval, fill=newdf,y=Freq))
ggplot(c, aes(x=interval, fill=newdf,y=newdf))
ggplot(c, aes(x=interval, fill=newdf,y=newdf)) + geom_bar(position="dodge")
?geom_bar
ggplot(c, aes(x=interval, fill=newdf,y=newdf, stat="identity")) + geom_bar(fill="white", colour="darkgreen")
ggplot(c, aes(x=interval,y=newdf, stat="identity")) + geom_bar(fill="white", colour="darkgreen")
c <- ddply(activity, c("daytype","interval"), summarise, impute = mean(impute))
c <- ddply(activity, c("daytype","interval"), summarise, impute = mean(impute))
p <- ggplot(c, aes(x=interval, y=impute))+geom_bar()
p + facet_grid(daytype ~ .)
p1 <- ggplot(c, aes(x=interval, y=impute))+geom_point()
p1 + facet_grid(daytype ~ .)
?geom_bar
p <- ggplot(c, aes(x=interval, y=impute))+geom_bar(stat="identity")
p + facet_grid(daytype ~ .)
View(c)
c <- ddply(activity, c("interval","daytype"), summarise, impute = mean(impute))
p <- ggplot(c, aes(x=interval, y=impute))+geom_bar(stat="identity")
p + facet_grid(daytype ~ .)
head(c)
head(wkdaydf)
head(activity)
wkday <- subset(activity, subset=daytype=="weekday")
wkend <- subset(activity, subset=daytype=="weekend")
wkdaymeansteps <- tapply(wkday$impute, wkday$interval, mean, simplify=FALSE)
wkendmeansteps <- tapply(wkend$impute, wkend$interval, mean, simplify=FALSE)
wkdaydf <- data.frame(dimnames(wkdaymeansteps), unlist(wkdaymeansteps))
wkenddf <- data.frame(dimnames(wkendmeansteps), unlist(wkendmeansteps))
head(wkdaydf)
head(wkdaydf[,2])
c <- ddply(activity, c("daytype","interval"), summarise, impute = mean(impute))
head(c)
max(c$impute)
p2 <- ggplot(c, aes(x=interval, y=impute))+geom_point()+geom_line()
p2 + facet_grid(daytype ~ .)
p2 <- ggplot(c, aes(x=interval, y=impute))+geom_line()
p2 + facet_grid(daytype ~ .)
p2 <- ggplot(c, aes(x=interval, y=impute))+geom_line()+geom_bar(stat="identity")
p2 + facet_grid(daytype ~ .)
p2 <- ggplot(c, aes(x=interval, y=impute))+geom_line()
p2 + facet_grid(daytype ~ .)
p2 <- ggplot(c, aes(x=interval, y=impute))+geom_line()
p2 + facet_grid(daytype ~ .)
p2 + ylab("mean number of steps")+ggtitle("Activity Patterns")
p2 <- ggplot(c, aes(x=interval, y=impute))+geom_line()
p2 + ylab("mean number of steps")+ggtitle("Activity Patterns")
p2 + facet_grid(daytype ~ .)
p2 <- ggplot(c, aes(x=factor(interval), y=impute))+geom_line()
#p2 + ylab("mean number of steps")+ggtitle("Activity Patterns")
p2 + facet_grid(daytype ~ .)
p <- ggplot(c, aes(x=factor(interval), y=impute))+geom_bar(stat="identity")
p + facet_grid(daytype ~ .)
p <- ggplot(c, aes(x=factor(interval), y=impute))+geom_bar(stat="identity",position=position_dodge())
p + facet_grid(daytype ~ .)
p <- ggplot(c, aes(x=factor(interval), y=impute, fill=impute))+geom_bar(stat="identity",position=position_dodge())
p + facet_grid(daytype ~ .)
p <- ggplot(c, aes(x=factor(interval), y=impute))+geom_bar(stat="identity",position=position_dodge())
p + facet_grid(daytype ~ .)
p <- ggplot(c, aes(x=factor(interval), y=impute, fill="blue"))+geom_bar(stat="identity",position=position_dodge())
p + facet_grid(daytype ~ .)
p <- ggplot(c, aes(x=factor(interval), y=impute))+geom_bar(stat="identity",position=position_dodge(),colour="blue")
p + facet_grid(daytype ~ .)
p <- ggplot(c, aes(x=factor(interval), y=impute))+geom_bar(stat="identity",position=position_dodge(),colour="lightblue")
p + facet_grid(daytype ~ .)
bp + theme(panel.grid.minor.y=element_blank(), panel.grid.major.y=element_blank())
p <- ggplot(c, aes(x=factor(interval), y=impute))+geom_bar(stat="identity",position=position_dodge(),colour="lightblue")
p + facet_grid(daytype ~ .)
p <- ggplot(c, aes(x=factor(interval), y=impute))+geom_bar(stat="identity",position=position_dodge(),colour="lightblue")
p + facet_grid(daytype ~ .)
bp + theme(panel.grid.minor.y=element_blank(), panel.grid.major.y=element_blank())
p <- ggplot(c, aes(x=factor(interval), y=impute))+geom_bar(stat="identity",position=position_dodge(),colour="lightblue")
p + facet_grid(daytype ~ .)
p + theme(panel.grid.minor.y=element_blank(), panel.grid.major.y=element_blank())
p <- ggplot(c, aes(x=factor(interval), y=impute))+geom_bar(stat="identity",position=position_dodge(),colour="lightblue")
p + theme(panel.grid.minor.y=element_blank(), panel.grid.major.y=element_blank())
p + facet_grid(daytype ~ .)
p2 <- ggplot(c, aes(x=factor(interval), y=impute))+geom_line()
#p2 + ylab("mean number of steps")+ggtitle("Activity Patterns")
p2 + facet_grid(daytype ~ .)
library("chron", lib.loc="C:/Program Files/R/R-3.1.0/library")
x <- chron(times=c$interval)
head(x)
?chron
p3 <- qplot(interval, impute, data = c, geom = "line")
qplot(interval, impute, data = c, geom = "line")
str(c)
c$int <- as.factor(c$interval)
str(c)
c <- ddply(activity, c("daytype","interval"), summarise, mean_steps = mean(impute))
c$int <- as.factor(c$interval)
p <- ggplot(c, aes(x=int, y=mean_steps))
p <- p + geom_bar(stat="identity",position=position_dodge(),colour="lightblue")
p <- p + facet_grid(daytype ~ .)
p
p <- ggplot(c, aes(x=int, y=mean_steps))
p <- p + geom_bar(stat="identity",colour="lightblue")
p <- p + facet_grid(daytype ~ .)
p
p3 <- qplot(int, mean_steps, geom="bar", stat="identity")
p3 <- p3 + facet_grid(daytype ~ .)
p3
p3 <- qplot(int, mean_steps, geom="bar", stat="identity")
p3
p3 <- qplot(c$int, c$mean_steps, geom="bar", stat="identity")
p3
p <- ggplot(c, aes(x=int, y=mean_steps))
p <- p + geom_bar(stat="identity",colour="lightblue")
p <- p + scale_x_continuous(breaks=c(50,100,150,200,250))
p <- p + facet_grid(daytype ~ .)
p
p <- ggplot(c, aes(x=int, y=mean_steps))
p <- p + geom_bar(stat="identity",colour="lightblue")
p <- p + scale_x_discrete(seq(1,288,by=1))
p <- p + facet_grid(daytype ~ .)
p
p <- ggplot(c, aes(x=int, y=mean_steps))
p <- p + geom_bar(stat="identity",colour="lightblue")
p <- p + scale_x_discrete(labels = c$interval))
p <- p + facet_grid(daytype ~ .)
p <- ggplot(c, aes(x=int, y=mean_steps))
p <- p + geom_bar(stat="identity",colour="lightblue")
p <- p + scale_x_discrete(labels = c$interval)
p <- p + facet_grid(daytype ~ .)
p
p <- ggplot(c, aes(x=int, y=mean_steps))
p <- p + geom_bar(stat="identity",colour="lightblue")
p <- p + scale_x_discrete(labels = c$int)
p <- p + facet_grid(daytype ~ .)
p
p <- ggplot(c, aes(x=interval, y=mean_steps))
p <- p + geom_bar(stat="identity",colour="lightblue")
p <- p + facet_grid(daytype ~ .)
p
p <- ggplot(c, aes(x=interval, y=mean_steps))
p <- p + geom_bar(stat="identity")
p <- p + facet_grid(daytype ~ .)
p
p2 <- ggplot(c, aes(x=factor(interval), y=mean_steps))+geom_line()
#p2 + ylab("mean number of steps")+ggtitle("Activity Patterns")
p2 + facet_grid(daytype ~ .)
p2 <- ggplot(c, aes(x=interval, y=mean_steps))+geom_line()
#p2 + ylab("mean number of steps")+ggtitle("Activity Patterns")
p2 + facet_grid(daytype ~ .)
library("lattice", lib.loc="C:/Program Files/R/R-3.1.0/library")
xyplot(mean_steps ~ daytype, c)
xyplot(mean_steps ~ interval, c)
xyplot(mean_steps ~ interval, groups = daytype, c)
xyplot(mean_steps ~ interval|daytype, c)
xyplot(mean_steps ~ interval|daytype, c, layout=c(1,2))
xyplot(mean_steps ~ interval|daytype, c, layout=c(1,2), type="l")
xyplot(mean_steps ~ as.factor(interval)|daytype, c, layout=c(1,2), type="l")
xyplot(mean_steps ~ factor(interval)|daytype, c, layout=c(1,2), type="l")
xyplot(mean_steps ~ factor(interval)|daytype, c, layout=c(1,2), type="l", xlab="Interval", ylab="Mean Number of Steps")
xyplot(mean_steps ~ factor(interval)|daytype, c, layout=c(1,2), type="l",
xlab="Interval", ylab="Mean Number of Steps",
scales=list(x=list(alternating = 10)))
xyplot(mean_steps ~ factor(interval)|daytype, c, layout=c(1,2), type="l",
xlab="Interval", ylab="Mean Number of Steps",
scales=list(x=list(alternating = 50)))
xyplot(mean_steps ~ factor(interval)|daytype, c, layout=c(1,2), type="l",
xlab="Interval", ylab="Mean Number of Steps",
scales=list(x=list(alternating = 100)))
xyplot(mean_steps ~ interval|daytype, c, layout=c(1,2), type="l",
xlab="Interval", ylab="Mean Number of Steps")
